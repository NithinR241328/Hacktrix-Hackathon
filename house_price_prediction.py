# -*- coding: utf-8 -*-
"""House price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19xx8Pf7UcA65W1SVusUEAeMa3ylnh8Oc

## House Price Prediction

Team Name : CODE CRAFTERS

Team Member 1 : Nithin Rosarieo

Team Member 2 : Naveenkumar S K

Team Member 3 : Aswanth Kumar R

Team Member 4 : Aneesh Balaji

Team Member 5 : Selvam M R

## Importing required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix,mean_absolute_error, mean_squared_error, r2_score

from sklearn.preprocessing import normalize,StandardScaler

import warnings
warnings.filterwarnings("ignore")

data=pd.read_csv("Chennai houseing sale.csv")
data.head()

data.shape

data['DATE_SALE'].nunique()

"""## Data Preprocessing"""

data[['day_s', 'month_s', 'year_s']] = data['DATE_SALE'].str.split('-', expand=True)
data.head()

data[['day_b', 'month_b', 'year_b']] = data['DATE_BUILD'].str.split('-', expand=True)
data.head()

data.drop(columns = ['DATE_SALE','day_s','month_s','day_b','month_b','DATE_BUILD'],inplace=True)
data.head()

data.AREA.replace(["Ann Nagar","Ana Nagar"],"Anna Nagar",inplace = True)
data.AREA.replace('Karapakam','Karapakkam',inplace=True)
data.AREA.replace(['Chrompt','Chrmpet','Chormpet'],'Chrompet',inplace=True)
data.AREA.replace('KKNagar','KK Nagar',inplace=True)
data.AREA.replace('TNagar','T Nagar',inplace=True)
data.AREA.replace('Adyr','Adyar',inplace=True)
data.AREA.replace('Velchery','Velachery',inplace=True)
data.SALE_COND.replace('Ab Normal','AbNormal',inplace=True)
data.SALE_COND.replace(['PartiaLl','Partiall'],'Partial',inplace=True)
data.SALE_COND.replace('Adj Land','AdjLand',inplace=True)
data.PARK_FACIL.replace('Noo','No',inplace=True)
data.BUILDTYPE.replace('Comercial','Commercial',inplace=True)
data.BUILDTYPE.replace('Other','Others',inplace=True)
data.UTILITY_AVAIL.replace('AllPub','All Pub',inplace=True)
data.UTILITY_AVAIL.replace('NoSewr ','NoSeWa',inplace=True)
data.STREET.replace('Pavd','Paved',inplace=True)
data.STREET.replace('NoAccess','No Access',inplace=True)

data.info()

"""## Converting categorical columns to numerical columns"""

cat_cols=['PRT_ID','AREA','SALE_COND','PARK_FACIL','BUILDTYPE','UTILITY_AVAIL','STREET','MZZONE']

for col in cat_cols:
    le=LabelEncoder()
    data[col]=le.fit_transform(data[col])

data.head()

data.isnull().sum()

"""## Imputing null values"""

data['N_BEDROOM']=data['N_BEDROOM'].fillna(data['N_BEDROOM'].mode()[0])
data['N_BATHROOM']=data['N_BATHROOM'].fillna(data['N_BATHROOM'].mode()[0])
data['QS_OVERALL'] = data['QS_OVERALL'].fillna(data['QS_OVERALL'].mean())

data.isnull().sum()

data.describe()

data.head()

data['SALES_PRICE'] = np.log(data['SALES_PRICE'])

"""## Separating Features and Targets"""

X = data.drop(columns=['PRT_ID','SALES_PRICE'], axis=1)
y = data['SALES_PRICE']

"""## Splitting into training and testing data"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

"""## Normalizing the data"""

from sklearn.preprocessing import StandardScaler

# Create a StandardScaler object
scaler = StandardScaler()

# Fit the scaler to your data and transform it
X_train_scaled = scaler.fit_transform(x_train)

# Apply the same transformation to your test data
X_test_scaled = scaler.transform(x_test)

"""## Linear Regression"""

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

# 6. Evaluate the model
y_pred = lr.predict(X_test_scaled)  # Predi

# Calculate evaluation metrics on the original scale
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""## Decision Tree Regressor"""

from sklearn.tree import DecisionTreeRegressor

# Create a DecisionTreeRegressor object
dt= DecisionTreeRegressor()

# Fit the model to your scaled training data
dt.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = dt.predict(X_test_scaled)

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, pred)

# Calculate R-squared (R2)
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""## Random Forest Regressor"""

from sklearn.ensemble import RandomForestRegressor

# Create a DecisionTreeRegressor object
rf= RandomForestRegressor()

# Fit the model to your scaled training data
rf.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = rf.predict(X_test_scaled)


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, pred)

# Calculate R-squared (R2)
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""## Gradient Boosting Regressor"""

from sklearn.ensemble import GradientBoostingRegressor

gbr= GradientBoostingRegressor()

# Fit the model to your scaled training data
gbr.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = gbr.predict(X_test_scaled)


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, pred)

# Calculate R-squared (R2)
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""## Extra Trees Regressor"""

from sklearn.ensemble import ExtraTreesRegressor

etr = ExtraTreesRegressor()

# Fit the model to your scaled training data
etr.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = etr.predict(X_test_scaled)


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, pred)

# Calculate R-squared (R2)
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""## XGB Regressor"""

from xgboost import XGBRegressor

xgb= XGBRegressor()

# Fit the model to your scaled training data
xgb.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = xgb.predict(X_test_scaled)


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, pred)

# Calculate R-squared (R2)
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

data.AREA.replace(0 ,'Adyar',inplace=True)
data.AREA.replace(1 ,'Anna Nagar',inplace=True)
data.AREA.replace(2 ,'Chrompet',inplace=True)
data.AREA.replace(3 ,'KK Nagar',inplace=True)
data.AREA.replace(4 ,'Karapakkam',inplace=True)
data.AREA.replace(5 ,'T Nagar',inplace=True)
data.AREA.replace(6 ,'Velachery',inplace=True)

"""## Performance of all models"""

import plotly.express as px

# Define the data
models = ['LR', 'DTR', 'RFR', 'GBR', 'ETR', 'XGB']
r2_scores = [0.86, 0.915, 0.958, 0.964, 0.978, 0.983]

# Create a DataFrame from the data
df = {'Model': models, 'R2 Score': r2_scores}
df = pd.DataFrame(df)

# Plot the bar chart
fig = px.bar(df, x='Model', y='R2 Score', color='Model', title='R2 Score by Model',template='plotly_dark')
fig.update_layout(width=1000, height=500)
fig.show()

import plotly.express as px

# Assuming 'data' is your DataFrame
fig = px.pie(
    data.groupby('AREA', as_index=False)['PRT_ID'].count(),
    values='PRT_ID',
    names='AREA',
    labels={'PRT_ID': 'Count'},
    template='plotly_dark',
    color_discrete_sequence=px.colors.sequential.Plasma,
    hole=0.5,
    title='<b> Houses Count in different Areas of Chennai</b>'
)

fig.update_layout(
    width=1000,  # Specify the width of the figure
    height=600,  # Specify the height of the figure
)

fig.show()

data['SALES_PRICE'] = np.exp(data['SALES_PRICE'])

fig = px.box(data,x='AREA',y='SALES_PRICE',color='AREA',template='plotly_dark',title='<b> Sales Price of Houses in different Areas')
fig.update_layout(
    width=1000,  # Specify the width of the figure
    height=500,  # Specify the height of the figure
)

fig.show()

X = data.drop(columns=['SALES_PRICE'], axis=1)
y = data['SALES_PRICE']

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

xgb= XGBRegressor()

# Fit the model to your scaled training data
xgb.fit(X_train_scaled, y_train)

# Make predictions on the scaled test data
pred = xgb.predict(X_test_scaled)
out = pd.DataFrame({"Actual Price": y_test,"Predicted Price":pred})

Result = data.merge(out, left_index =True, right_index = True)
Result[['AREA','Actual Price','Predicted Price']].sample(20)

"""Thus a maximum of 98.3% R2_score is obtained from XGB Regressor"""